package jana.util;

import jana.java.JJavaRepository;
import jana.lang.java.JJavaSignature;
import jana.util.logging.JLogger;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Level;

public class JClasspathDirectory extends JRelativeDirectory
{
	/**
	 * Generated by Eclipse
	 */
	private static final long serialVersionUID = 9025963730831726549L;
	
	protected static JLogger logger = JLogger.getLogger(JJavaRepository.DEFAULT_LOGGER);
	private final static boolean LOG_CLASS_FILE_SEARCH = false; 
	
	protected final static int FILE_BUFFER_SIZE = 8192;
	protected final String CLASS_FILE_DESIGNATOR = ".class";
	
	// Java language noise (why can't I just inherit my super-classes constructors?)
	
	public JClasspathDirectory(String fileName, String parentDirName) throws IOException
	{
		super(fileName,parentDirName);
	}
	
	public JClasspathDirectory(String fileName, File parent) throws IOException
	{
		super(fileName,parent);
	}
	
	public JClasspathDirectory(File file, String parentDirName) throws IOException
	{
		super(file,parentDirName);
	}
	
	public JClasspathDirectory(File file, File parent) throws IOException
	{
		super(file,parent);
	}
	
	// the actual constructors
	
	public JClasspathDirectory(File aFile) throws IOException
	{
		super(aFile.getCanonicalPath());
	}

	public JClasspathDirectory(String pathname) throws IOException
	{
		this(new File(pathname));
	}
	
	/**
	 * Enumerates the files in a directory and 
	 * adds the signatures of the found class-files to a list
	 *  
	 * @return List<JJavaSignature> a list of signatures of the classes found in the .jar file
	 * @throws IOException
	 */
	public List<JJavaSignature> classesInDirectory() throws IOException
	{
		return this.classesInDirectory(true);
	}
	
	/**
	 * Enumerates the files in a directory and 
	 * adds the signatures of the found class-files to a list
	 * 
	 * @param muffleExceptions if true -- ignore and continue in-spite of errors	 * 
	 * @return List<JJavaSignature> a list of signatures of the classes found in the .jar file
	 * @throws IOException
	 */
	public List<JJavaSignature> classesInDirectory(boolean muffleExceptions) throws IOException
	{	
		JClassFile classFile;
		JJavaSignature signature;
		File currentDirectory;
		File[] files;
		List<File> subDirectories;

		List<JJavaSignature> signatures = new ArrayList<JJavaSignature>();	

		subDirectories = new ArrayList<File>();
		subDirectories.add(this);

		while(!subDirectories.isEmpty())
		{
			currentDirectory = subDirectories.remove(0);

			if( currentDirectory.isDirectory() )
			{	
				files = currentDirectory.listFiles();

				for(File file : files)
				{	
					if( file.isDirectory() )
						subDirectories.add(file);
					else
					{
						try
						{
							classFile = new JClassFile(file,this.baseDir);

							if( classFile.isValidClassfile() )
							{
								signature = classFile.getSignature();
								if(LOG_CLASS_FILE_SEARCH && Level.DEBUG.isGreaterOrEqual(logger.getLevel())) // ... give the JITter a chance
									logger.debug("adding class name: " + signature.qualifiedName());
								signatures.add(signature);
							}
						}
						catch(IOException ioe)
						{
							if(!muffleExceptions)
								throw ioe;
						}
					}
				}
			}
		}

		return signatures;
	}
}
